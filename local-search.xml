<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SO函数运行顺序</title>
    <link href="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="加载运行流程"><a href="#加载运行流程" class="headerlink" title="加载运行流程"></a>加载运行流程</h2> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class=""><h3 id="1-init"><a href="#1-init" class="headerlink" title="1. _init"></a>1. _init</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">void</span> _init(<span class="hljs-keyword">void</span>) &#123; &#125; <br></code></pre></td></tr></table></figure><p>编译生成后会在<code>.init</code>段</p> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/readelf.png" class="" width="600" height="400"><p>IDA反编译对应<code>_init_proc</code>方法</p> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/init_proc.png" class="" width="600" height="400"><h3 id="2-constructor"><a href="#2-constructor" class="headerlink" title="2. constructor"></a>2. constructor</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs delphi">__attribute__( (<span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(1)</span>) ) <span class="hljs-title">void</span> <span class="hljs-title">aaaa</span><span class="hljs-params">( void )</span></span><br><span class="hljs-function"><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">LOGI( &quot;constructor constructor 1 called&quot; );</span></span><br><span class="hljs-comment"><span class="hljs-function"></span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">__<span class="hljs-title">attribute__</span><span class="hljs-params">( (<span class="hljs-keyword">constructor</span>(2)</span>) ) <span class="hljs-title">void</span> <span class="hljs-title">aaaa</span><span class="hljs-params">( void )</span></span><br><span class="hljs-function"><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">LOGI( &quot;constructor constructor 2 called&quot; );</span></span><br><span class="hljs-comment"><span class="hljs-function"></span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br></code></pre></td></tr></table></figure><p>根据设置的优先级依次调用,编译生成后会在.init_array段</p> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/init_array.png" class="" width="600" height="400"><p>IDA分析 ctrl+s定位到.init_array段</p> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/ida_init_array.png" class="" width="600" height="400"><p>点击进入方法实现</p> <img src="/2021/08/22/so%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/images/%E8%BF%9B%E5%85%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.png" class="" width="600" height="400"><h3 id="3-JNI-OnLoad"><a href="#3-JNI-OnLoad" class="headerlink" title="3. JNI_OnLoad"></a>3. JNI_OnLoad</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-keyword">void</span>* reserved)</span></span>&#123;<br>    <span class="hljs-built_in">LOGI</span>(<span class="hljs-string">&quot;jni onload called&quot;</span>);<br>   <span class="hljs-comment">//TODO</span><br>    <span class="hljs-keyword">return</span> JNI_VERSION_1_4;  <span class="hljs-comment">//这里很重要，必须返回版本，否则加载会失败。</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="源码分析（Android10）"><a href="#源码分析（Android10）" class="headerlink" title="源码分析（Android10）"></a>源码分析（Android10）</h2><p>Android加载动态库有三种方式</p><ul><li><p>System.loadLibrary  </p><p>java中方法,不要指定so路径，系统会自动补全</p></li><li><p>System.load</p><p>java中方法，指定so路径</p></li><li><p>dlopen</p><p>libc库中方法，指定so路径</p></li></ul><figure class="highlight plaintext"><figcaption><span>``` 与```System.load```的实现在```/libcore/ojluni/src/main/java/java/lang/System.java```中</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs System.loadLibrary"><br>最终都会调用```/libcore/ojluni/src/main/java/java/lang/Runtime.java```下的native方法```nativeLoad```<br><br>因为```System.loadLibrary  ```不是so文件的绝对路径，所以在系统需要从```java.library.path```属性中获取系统库的地址，遍历该so文件在哪个路径下，最终返回绝对路径，一般的```java.library.path```为<br><br>- /vendor/lib<br><br>- /system/lib<br><br>- /data/app-lib/com.xxxxx-1<br><br>nativeLoad的JNI实现在```/libcore/ojluni/src/main/native/Runtime.c```中<br><br>```c<br>JNIEXPORT jstring JNICALL<br>Runtime_nativeLoad(JNIEnv* env, jclass ignored, jstring javaFilename,<br>                   jobject javaLoader, jclass caller)<br>&#123;<br>    return JVM_NativeLoad(env, javaFilename, javaLoader, caller);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>/art/openjdkjvm/OpenjdkJvm.cc</code>吓得<code>JVM_NativeLoad</code>方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">JNIEXPORT jstring <span class="hljs-title">JVM_NativeLoad</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 jstring javaFilename,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 jobject javaLoader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 jclass caller)</span> </span>&#123;<br>  <br>    art::JavaVMExt* vm = art::Runtime::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">GetJavaVM</span>();<br>    <span class="hljs-keyword">bool</span> success = vm-&gt;<span class="hljs-built_in">LoadNativeLibrary</span>(env,<br>                                         filename.<span class="hljs-built_in">c_str</span>(),<br>                                         javaLoader,<br>                                         caller,<br>                                         &amp;error_msg);<br>  <span class="hljs-comment">// Don&#x27;t let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span><br>  env-&gt;<span class="hljs-built_in">ExceptionClear</span>();<br>  <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(error_msg.<span class="hljs-built_in">c_str</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>调用当前文件中的<code>LoadNativeLibrary</code>方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">JavaVMExt::LoadNativeLibrary</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-keyword">const</span> std::string&amp; path,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  jobject class_loader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  jclass caller_class,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  std::string* error_msg)</span> </span>&#123;<br>     ......<br><br>  <span class="hljs-keyword">void</span>* handle = android::<span class="hljs-built_in">OpenNativeLibrary</span>(<br>      env,<br>      runtime_-&gt;<span class="hljs-built_in">GetTargetSdkVersion</span>(),<br>      path_str,<br>      class_loader,<br>      (caller_location.<span class="hljs-built_in">empty</span>() ? <span class="hljs-literal">nullptr</span> : caller_location.<span class="hljs-built_in">c_str</span>()),<br>      library_path.<span class="hljs-built_in">get</span>(),<br>      &amp;needs_native_bridge,<br>      &amp;nativeloader_error_msg);<br><br>  <br>  <span class="hljs-keyword">bool</span> was_successful = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">void</span>* sym = library-&gt;<span class="hljs-built_in">FindSymbol</span>(<span class="hljs-string">&quot;JNI_OnLoad&quot;</span>, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-keyword">if</span> (sym == <span class="hljs-literal">nullptr</span>) &#123;<br>    was_successful = <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">VLOG</span>(jni) &lt;&lt; <span class="hljs-string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;]&quot;</span>;<br>    <span class="hljs-keyword">using</span> JNI_OnLoadFn = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(*)(JavaVM*, <span class="hljs-keyword">void</span>*);<br>    JNI_OnLoadFn jni_on_load = <span class="hljs-keyword">reinterpret_cast</span>&lt;JNI_OnLoadFn&gt;(sym);<br>    <span class="hljs-keyword">int</span> version = (*jni_on_load)(<span class="hljs-keyword">this</span>, <span class="hljs-literal">nullptr</span>);<br><br>.........<br><br>    <span class="hljs-keyword">if</span> (version == JNI_ERR) &#123;<br>      <span class="hljs-built_in">StringAppendF</span>(error_msg, <span class="hljs-string">&quot;JNI_ERR returned from JNI_OnLoad in \&quot;%s\&quot;&quot;</span>, path.<span class="hljs-built_in">c_str</span>());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (JavaVMExt::<span class="hljs-built_in">IsBadJniVersion</span>(version)) &#123;<br>      <span class="hljs-built_in">StringAppendF</span>(error_msg, <span class="hljs-string">&quot;Bad JNI version returned from JNI_OnLoad in \&quot;%s\&quot;: %d&quot;</span>,<br>                    path.<span class="hljs-built_in">c_str</span>(), version);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      was_successful = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br><br>  library-&gt;<span class="hljs-built_in">SetResult</span>(was_successful);<br>  <span class="hljs-keyword">return</span> was_successful;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用了<code>android::OpenNativeLibrary</code>方法加载SO文件，加载成功后会查找符号表是否有<code>JNI_OnLoad</code>,如果有则根据<code>JNI_OnLoad</code>的地址进行调用</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDB调试APP</title>
    <link href="/2021/08/22/JDB%E8%B0%83%E8%AF%95APP/"/>
    <url>/2021/08/22/JDB%E8%B0%83%E8%AF%95APP/</url>
    
    <content type="html"><![CDATA[<h2 id="1-以调试模式运行APP"><a href="#1-以调试模式运行APP" class="headerlink" title="1. 以调试模式运行APP"></a>1. 以调试模式运行APP</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D  <span class="hljs-keyword">com</span>.cola.jni/<span class="hljs-keyword">com</span>.cola.jni.MainActivity<br></code></pre></td></tr></table></figure><h2 id="2-转发端口到本地"><a href="#2-转发端口到本地" class="headerlink" title="2.转发端口到本地"></a>2.转发端口到本地</h2><p>使用<code>DDMS</code>转发端口</p> <img src="/2021/08/22/JDB%E8%B0%83%E8%AF%95APP/images/ddms.png" class=""><p>或者通过<code>adb</code>转发到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">adb jdwp  <span class="hljs-comment">#获取可调试APP PID(判断目标APP是否可调试，将ro.debuggable设为1可调试所有APP)</span><br>adb forward tcp:<span class="hljs-number">8700</span> jdwp:$jdwp_pid<br></code></pre></td></tr></table></figure><h2 id="JDB附加"><a href="#JDB附加" class="headerlink" title="JDB附加"></a>JDB附加</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jdb -connect com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jdi</span><span class="hljs-selector-class">.SocketAttach</span>:hostname=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>,port=<span class="hljs-number">8700</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>jdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOSP导入IDE</title>
    <link href="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/"/>
    <url>/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/</url>
    
    <content type="html"><![CDATA[<h2 id="Java代码导入-Android-Studio"><a href="#Java代码导入-Android-Studio" class="headerlink" title="Java代码导入 Android Studio"></a>Java代码导入 Android Studio</h2><h3 id="1-source-build-envsetup-sh"><a href="#1-source-build-envsetup-sh" class="headerlink" title="1.source build/envsetup.sh"></a>1.source build/envsetup.sh</h3><h3 id="2-编译生成-idegen-jar"><a href="#2-编译生成-idegen-jar" class="headerlink" title="2.编译生成 idegen.jar"></a>2.编译生成 idegen.jar</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mmm development<span class="hljs-regexp">/tools/i</span>degen/ <br></code></pre></td></tr></table></figure><p>运行完毕上面的命令之后，就在根目录生成了2个文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">android.ipr </span>和 <span class="hljs-keyword">android.iml</span><br></code></pre></td></tr></table></figure><h3 id="3-排除不必要的模块，提高加载速度"><a href="#3-排除不必要的模块，提高加载速度" class="headerlink" title="3.排除不必要的模块，提高加载速度"></a>3.排除不必要的模块，提高加载速度</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">打开<span class="hljs-keyword">android.iml, </span>找到excludeFolder属性,只添加framework<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/abi&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/art&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/bionic&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/bootable&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/build&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/cts&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/dalvik&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/developers&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/development&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/device&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/docs&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/external&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/hardware&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/libcore&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/libnativehelper&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/ndk&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/out&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/pdk&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/prebuilts&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/sdk&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/system&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/tools&quot;</span>/&gt;<br>&lt;excludeFolder <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;file://<span class="hljs-variable">$MODULE_DIR</span>$/kernel&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="4-使用Android-Studio直接android-ipr文件"><a href="#4-使用Android-Studio直接android-ipr文件" class="headerlink" title="4.使用Android Studio直接android.ipr文件"></a>4.使用Android Studio直接android.ipr文件</h3><h3 id="5-存在问题"><a href="#5-存在问题" class="headerlink" title="5.存在问题"></a>5.存在问题</h3><p>打开的Java代码，查看集成关系或者调用关系的时候，还是会跳转到.class文件中，而不是相应的Java类?</p><h4 id="5-1-删除多余的JDK和SDK"><a href="#5-1-删除多余的JDK和SDK" class="headerlink" title="5.1 删除多余的JDK和SDK"></a>5.1 删除多余的JDK和SDK</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E7%9A%84JDK%E5%92%8CSDK.png" class=""><h4 id="5-2添加JDK"><a href="#5-2添加JDK" class="headerlink" title="5.2添加JDK"></a>5.2添加JDK</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E6%B7%BB%E5%8A%A0sdk.png" class=""><h4 id="5-3删除JDK中Classpath和Sourcepath中的内容"><a href="#5-3删除JDK中Classpath和Sourcepath中的内容" class="headerlink" title="5.3删除JDK中Classpath和Sourcepath中的内容"></a>5.3删除JDK中Classpath和Sourcepath中的内容</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E5%88%A0%E9%99%A4Classpath.png" class=""><h4 id="5-4-删除SDK中Classpath和Sourcepath中的内容"><a href="#5-4-删除SDK中Classpath和Sourcepath中的内容" class="headerlink" title="5.4 删除SDK中Classpath和Sourcepath中的内容"></a>5.4 删除SDK中Classpath和Sourcepath中的内容</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E5%88%A0%E9%99%A4Sourcepath.png" class=""><h4 id="5-5-配置Modules"><a href="#5-5-配置Modules" class="headerlink" title="5.5 配置Modules"></a>5.5 配置Modules</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E9%85%8D%E7%BD%AEModules.png" class=""><h4 id="5-6把framework添加到Dependencies中"><a href="#5-6把framework添加到Dependencies中" class="headerlink" title="5.6把framework添加到Dependencies中"></a>5.6把framework添加到Dependencies中</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/framework%E6%B7%BB%E5%8A%A0%E5%88%B0Dependencies1.png" class=""><ul><li></li></ul> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/framework%E6%B7%BB%E5%8A%A0%E5%88%B0Dependencies2.png" class=""><ul><li></li></ul> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/framework%E6%B7%BB%E5%8A%A0%E5%88%B0Dependencies3.png" class=""><ul><li></li></ul> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/framework%E6%B7%BB%E5%8A%A0%E5%88%B0Dependencies4.png" class=""><h4 id="5-7-确定Project-SDK选择正确"><a href="#5-7-确定Project-SDK选择正确" class="headerlink" title="5.7 确定Project SDK选择正确"></a>5.7 确定Project SDK选择正确</h4> <img src="/2021/08/22/AOSP%E5%AF%BC%E5%85%A5IDE/images/%E7%A1%AE%E5%AE%9AProjectSDK.png" class=""><h2 id="Native代码导入CLion"><a href="#Native代码导入CLion" class="headerlink" title="Native代码导入CLion"></a>Native代码导入CLion</h2><h3 id="1-打开开关，编译时生成CMakeLists-txt"><a href="#1-打开开关，编译时生成CMakeLists-txt" class="headerlink" title="1.打开开关，编译时生成CMakeLists.txt"></a>1.打开开关，编译时生成CMakeLists.txt</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">SOONG_GEN_CMAKEFILES</span>=1<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">SOONG_GEN_CMAKEFILES_DEBUG</span>=1<br></code></pre></td></tr></table></figure><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">make</span> -j<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h3 id="3-生成CMakeLists-txt"><a href="#3-生成CMakeLists-txt" class="headerlink" title="3.生成CMakeLists.txt"></a>3.生成CMakeLists.txt</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">out<span class="hljs-regexp">/development/i</span>de<span class="hljs-regexp">/clion/</span>xxxx<br></code></pre></td></tr></table></figure><h3 id="4-创建CMakeLists-txt用于合并"><a href="#4-创建CMakeLists-txt用于合并" class="headerlink" title="4. 创建CMakeLists.txt用于合并"></a>4. 创建CMakeLists.txt用于合并</h3><p><code>在clion目录下创建CMakeLists.txt</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cmake_minimum_required</span><span class="hljs-params">(VERSION <span class="hljs-number">3.6</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">project</span><span class="hljs-params">(AOSP-Native)</span></span><br><br><span class="hljs-comment">//用到了哪个模块再导入即可，要保证改目录下有CMakeLists.txt</span><br><span class="hljs-comment">// 添加子模块，导入了部分工程</span><br><span class="hljs-function"><span class="hljs-title">add_subdirectory</span><span class="hljs-params">(frameworks/native)</span></span><br>.......<br></code></pre></td></tr></table></figure><h3 id="5-CLion导入"><a href="#5-CLion导入" class="headerlink" title="5. CLion导入"></a>5. CLion导入</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 打开CLion<br><span class="hljs-bullet">2.</span> 选择「open xxxxxx」<br><span class="hljs-bullet">3.</span> 指定包含 CMakeLists.txt 的目录out/development/ide/clion<br><span class="hljs-bullet">4.</span> 选择「Open Existing Project」<br></code></pre></td></tr></table></figure><h3 id="6-更改工程根目录"><a href="#6-更改工程根目录" class="headerlink" title="6.更改工程根目录"></a>6.更改工程根目录</h3><p>设置root为aosp源码根目录</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">T<span class="hljs-function"><span class="hljs-title">ools</span> -&gt;</span> CM<span class="hljs-function"><span class="hljs-title">ake</span> -&gt;</span> Change Project Root<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://www.jianshu.com/p/<span class="hljs-number">2</span>ba<span class="hljs-number">5</span>d<span class="hljs-number">6</span>bd<span class="hljs-number">461</span>e<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>rom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android SO库与源码对应关系</title>
    <link href="/2021/08/22/Android-so%E5%BA%93%E4%B8%8E%E6%BA%90%E7%A0%81%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
    <url>/2021/08/22/Android-so%E5%BA%93%E4%B8%8E%E6%BA%90%E7%A0%81%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<ul><li><p>libandroid.so     <code>frameworks/base/native/android</code></p></li><li><p>libandroid_runtime.so    <code>frameworks/base/core/jni</code></p></li><li><p>libandroidfw.so    <code>frameworks/base/libs/androidfw</code></p></li><li><p>libaudioutils.so    <code>system/media/audio_utils</code></p></li><li><p>libbinder.so    <code>frameworks/native/libs/binder</code></p></li><li><p>libbluedroid.so    <code>system/bluetooth/bluedroid</code></p></li><li><p>libc.so    <code>bionic/libc</code></p></li><li><p>libcamera_client.so    <code>frameworks/av/camera</code></p></li><li><p>libcorkscrew.so    <code>system/core/libcorkscrew</code></p></li><li><p>libcpustats.so    <code>frameworks/native/libs/cpustats</code></p></li><li><p>libcrypto.so    <code>external/openssl</code></p></li><li><p>libcutils.so    <code>system/core/libcutils</code></p></li><li><p>libdbus.so    <code>external/dbus/dbus</code></p></li><li><p>libdvm.so    <code>dalvik/vm</code></p></li><li><p>libart.so    <code>art/runtime</code></p></li><li><p>libemoji.so    <code>frameworks/opt/emoji</code></p></li><li><p>libETC1.so    <code>frameworks/native/opengl/libs</code></p></li><li><p>libgccdemangle    <code>external/gcc-demangle</code></p></li><li><p>libgui.so    <code>frameworks/native/libs/gui</code></p></li><li><p>libgabi++.so    <code>abi/cpp</code></p></li><li><p>libGLESv1_CM.so    <code>frameworks/native/opengl/libs</code></p></li><li><p>libharfbuzz.so    <code>external/harfbuzz</code></p></li><li><p>libhwui.so    <code>frameworks/base/libs/hwui</code></p></li><li><p>libhardware_legacy.so    <code>hardware/libhardware_legacy</code></p></li><li><p>libjpeg.so    <code>external/jpeg</code></p></li><li><p>libmedia.so    <code>frameworks/av/media/libmedia</code></p></li><li><p>libmedia_native.so    <code>frameworks/av/media/libmedia_native</code></p></li><li><p>libnetutils.so    <code>system/core/libnetutils</code></p></li><li><p>libstagefright_foundation.so    <code>frameworks/av/media/libstagefright/foundation</code></p></li><li><p>libsonivox.so    <code>external/sonivox</code></p></li><li><p>libspeexresampler    <code>external/speex</code></p></li><li><p>libstlport.so    <code>external/stlport</code></p></li><li><p>libssl.so    <code>external/openssl</code></p></li><li><p>libui.so    <code>frameworks/native/libs/ui</code></p></li><li><p>libutils.so    <code>frameworks/native/libs/utils</code></p></li><li><p>libusbhost.so    <code>system/core/libusbhost</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Magisk开启ro.debuggable调试</title>
    <link href="/2021/08/22/Magisk%E5%BC%80%E5%90%AFro-debuggable%E8%B0%83%E8%AF%95/"/>
    <url>/2021/08/22/Magisk%E5%BC%80%E5%90%AFro-debuggable%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">magisk resetprop ro.debuggable <span class="hljs-number">1</span><br><span class="hljs-comment">#查看ro.debuggable</span><br>getprop ro.debuggable<br><span class="hljs-comment">#重启</span><br>stop;start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>magisk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pixel XL AOSP源码编译</title>
    <link href="/2021/08/22/pixel-XL-AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2021/08/22/pixel-XL-AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>操作系统 ：虚拟机 ubuntu 16.04</li><li>内存 ：12G</li><li>硬盘 ：150G</li><li>CPU ：4核</li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><h3 id="1-源码分支获取"><a href="#1-源码分支获取" class="headerlink" title="1. 源码分支获取"></a>1. 源码分支获取</h3><p>根据手机型号下载对应的版本，通过以下网站获取pixel XL android 10版本的源码标记 android-10.0.0_r17</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds<br></code></pre></td></tr></table></figure> <img src="/2021/08/22/pixel-XL-AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/images/%E6%BA%90%E7%A0%81%E5%88%86%E6%94%AF%E8%8E%B7%E5%8F%96.png" class=""><h3 id="2-下载android源码"><a href="#2-下载android源码" class="headerlink" title="2.下载android源码"></a>2.下载android源码</h3><p>repo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install git-core<br>sudo apt-get install git-core curl<br>mkdir ~/<span class="hljs-built_in">bin</span>/<br>cd ~/<span class="hljs-built_in">bin</span><br><br>curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/<span class="hljs-built_in">bin</span>/repo<br>chmod a+x ~/<span class="hljs-built_in">bin</span>/repo<br>gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>在~/.bashrc里添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#国内镜像</span><br>export REPO_URL=<span class="hljs-string">&#x27;https://aosp.tuna.tsinghua.edu.cn/git-repo&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-同步代码"><a href="#3-同步代码" class="headerlink" title="3. 同步代码"></a>3. 同步代码</h3><h4 id="3-1-第一种方式"><a href="#3-1-第一种方式" class="headerlink" title="3.1 第一种方式"></a>3.1 第一种方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cd ~/work/sources/android-<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>_r17<br>repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>_r17<br>repo sync -c --no-tags --prune -f -j4  <span class="hljs-comment">#线程根据cpu核数决定 一般为cpu核数x2，此处采用4线程</span><br></code></pre></td></tr></table></figure><p>参数介绍:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs //参数说明">-c, --current-branch fetch only current branch from server.<br>这个选项指定只获取执行 repo init 时 -b 选项所指定的分支，不会获取远端服务器的分支信息。<br>例如服务器上新增了其他分支，使用 -c 选项同步后，在本地 git 仓库执行 git branch -r 命令看不到服务器新增的分支名。如果不加 -c 选项，那么同步的时候，会打印 [new branch] 这样的信息，使用 git branch -r 命令可查看到服务器新增的分支。<br><br>–no-tags don’t fetch tags.<br>该选项指定不获取服务器上的tag信息。<br><br>–prune delete refs that no longer exist on the remote.<br>如果远端服务器已经删除了某个分支，在 repo sync 时加上 --prune 选项，可以让本地仓库删除对这个分支的跟踪引用。<br><br>-j JOBS, --jobs=JOBS projects to fetch simultaneously (default 2).<br>指定启用多少个线程来同步。<br>例如上面的 -j 4 指定用4个线程来同步。如果没有提供该选项，默认是用2个线程。<br><br>-f：即使某个项目同步失败，也继续同步其他项目。<br><br>总的来说，在 repo sync -c --no-tags --prune -j 4 命令中，使用 -c 和 --no-tags 选项可以减少需要同步的内容，从而减少要占用的本地代码空间，也可以减少一些同步时间。<br>使用 -j 选项来指定启用多线程进行同步，可以加快执行速度，也就减少了同步时间。<br>使用 --prune 选项去掉已删除分支的跟踪引用，一般不会用到，这个选项可加可不加。<br></code></pre></td></tr></table></figure><h4 id="3-1-第二种方式-未尝试此方法不知道是否可行"><a href="#3-1-第二种方式-未尝试此方法不知道是否可行" class="headerlink" title="3.1 第二种方式(未尝试此方法不知道是否可行)"></a>3.1 第二种方式(未尝试此方法不知道是否可行)</h4><p>下载源码的初始化包（加速源码下载） 大约60G</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/aosp-monthly/</span>aosp-latest.tar<br></code></pre></td></tr></table></figure><p>解压缩,解压缩完成之后会多出来~/aosp目录<br>切进去</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> zxvf aosp-latest.tar<br></code></pre></td></tr></table></figure><p>cd  aosp </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>_r17<br>repo sync -c --no-tags --prune -f -j4  <span class="hljs-comment">#线程根据cpu核数决定 一般为cpu核数x2，此处采用4线程</span><br></code></pre></td></tr></table></figure><h3 id="4-驱动下载"><a href="#4-驱动下载" class="headerlink" title="4. 驱动下载"></a>4. 驱动下载</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>developers.google.com<span class="hljs-regexp">/android/</span>drivers<span class="hljs-comment">#sailfishqp1a.190711.020</span><br></code></pre></td></tr></table></figure><p>下载google_devices-sailfish-qp1a.191005.007.a3-a1615a0f.tgz</p><p>qcom-sailfish-qp1a.191005.007.a3-191228fe.tgz<br>两个压缩包，191005.007.a3为当时最新版本驱动</p> <img src="/2021/08/22/pixel-XL-AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/images/%E9%A9%B1%E5%8A%A8%E4%B8%8B%E8%BD%BD.png" class=""><p>下载完成后解压会获得两个.sh脚本文件，运行两个脚本后会生成vendor文件夹，将vendor文件夹拷贝到<strong>源码根目录</strong>下</p><h3 id="5-编译环境"><a href="#5-编译环境" class="headerlink" title="5. 编译环境"></a>5. 编译环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git-core openjdk-8-jdk gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libxml2-utils xsltproc unzip<br></code></pre></td></tr></table></figure><h3 id="6-编译脚本准备"><a href="#6-编译脚本准备" class="headerlink" title="6. 编译脚本准备"></a>6. 编译脚本准备</h3><p>进去源码根目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">source ./build/envsetup.sh <br>lunch aosp_sailfish-userdebug <span class="hljs-comment">#也可以命令行lunch回车稍等片刻输入 然后输入15即可</span><br><br><span class="hljs-comment">#调整一个Java参数，要不然会出现Java OOM错误</span><br>export JACK_SERVER_VM_ARGUMENTS=<span class="hljs-string">&quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4096m&quot;</span><br><br></code></pre></td></tr></table></figure><p>注: 我们可以在aosp/build/tools/buildinfo.sh  vendor_buildinfo.sh 这两个文件中直接修改手机品牌的名字,厂家等信息</p><h3 id="7-开始编译"><a href="#7-开始编译" class="headerlink" title="7. 开始编译"></a>7. 开始编译</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">make -j6   <span class="hljs-comment">#线程视配置而定</span><br><br><span class="hljs-comment">#编译的结果在 ~/aosp/out/target/product/marlin 文件夹中</span><br><span class="hljs-comment">#比较重要的几个是：</span><br><br>boot.img<br>recovery.img<br>ramdisk.img<br>system.img<br>userdata.img<br></code></pre></td></tr></table></figure><h3 id="8-刷机"><a href="#8-刷机" class="headerlink" title="8. 刷机"></a>8. 刷机</h3><p>回到源码根目录下输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fastboot flashall -w</span><br></code></pre></td></tr></table></figure><p>注 lanch命令为我们设置好了ANDROID_PRODUCT_OUT变量的值为编译文件目录确保它的值和编译后镜像输出目录的路径值一致。如果不一致的话，重新设置ANDROID_PRODUCT_OUT的值与编译后镜像输出目录路径值一致。 </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="fastboot"><a href="#fastboot" class="headerlink" title="fastboot"></a>fastboot</h3><p>一、Fastboot</p><p>1.1 Recovery模式(卡刷)</p><p>在系统进行定制时，编译系统会编译出一份ZIP的压缩包，里面是一些系统分区镜像，提供给客户进行手动升级、恢复系统。需要提前将压缩包内置SDcard，在Recovery模式进行。</p><p>进入Recovery方法：将手机完全关机后，按住音量键下(上)+电源键，进入BootLoader界面。用音量加减来控制光标，电源键来进行确认(有的机器只能用音量下键进行选择，上键是确认键)。说明：有的机器可能没有预装Recovery。</p><p>1.2 Recovery模式(线刷)</p><p>在安卓手机中Fastboot是一种比Recovery更底层的刷机模式。使用USB数据线连接手机的一种刷机模式。这就是所谓的线刷，与Recovery模式相比Fastboot需要掌握一些烧机命令，对于某些系统卡刷来说，线刷更可靠，安全。</p><p>二、Android系统分区介绍</p><ul><li><p>bootloader     系统开机引导类似电脑BIOS，这块刷错手机就会<strong>变成砖</strong></p></li><li><p>radio     通讯模块、基带、WIFI、Bluetooth等衔接硬件的驱动软件</p></li><li><p>recovery     系统故障时负责恢复</p></li><li><p>boot     Linux嵌入式系统内核</p></li><li><p>system     系统文件、应用</p></li><li><p>cache     系统运行时产生的缓存</p></li><li><p>userdata     用户使用APP产生的缓存数据</p></li></ul><h3 id="模块编译介绍"><a href="#模块编译介绍" class="headerlink" title="模块编译介绍"></a>模块编译介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#除了通过make命令编译可以整个android源码外,Google也为我们提供了相应的命令来支持单独模块的编译.</span><br><span class="hljs-comment">#编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,除了上边用到的lunch,还有以下:</span><br><br>  - croot: Changes directory to the top of the tree.<br>  - m: Makes <span class="hljs-keyword">from</span> the top of the tree.<br>  - mm: Builds <span class="hljs-built_in">all</span> of the modules <span class="hljs-keyword">in</span> the current directory.<br>  - mmm: Builds <span class="hljs-built_in">all</span> of the modules <span class="hljs-keyword">in</span> the supplied directories.<br>  - cgrep: Greps on <span class="hljs-built_in">all</span> local C/C++ files.<br>  - jgrep: Greps on <span class="hljs-built_in">all</span> local Java files.<br>  - resgrep: Greps on <span class="hljs-built_in">all</span> local res/*.xml files.<br>  - godir: Go to the directory containing a file.<br></code></pre></td></tr></table></figure><p>其中mmm指令就是用来编译指定目录.通常来说,每个目录只包含一个模块.比如这里我们要编译Launcher2模块,执行指令:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mmm packages<span class="hljs-regexp">/apps/</span>Launcher2/<br></code></pre></td></tr></table></figure><p>稍等一会之后,如果提示:</p><p>make completed success fully </p><p>即表示编译完成,此时在out/target/product/gereric/system/app就可以看到编译的Launcher2.apk文件了.</p><h3 id="重新打包系统镜像"><a href="#重新打包系统镜像" class="headerlink" title="重新打包系统镜像"></a>重新打包系统镜像</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">编译好指定模块后,如果我们想要将该模块对应的apk集成到系统镜像中,需要借助<span class="hljs-keyword">make</span> snod指令重新打包系统镜像,这样我们新生成的<span class="hljs-built_in">system</span>.img中就包含了刚才编译的Launcher2模块了.重启机器之后生效.<br></code></pre></td></tr></table></figure><h3 id="单独安装模块"><a href="#单独安装模块" class="headerlink" title="单独安装模块"></a>单独安装模块</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">我们在不断的修改某些模块,总不能每次编译完成后都要重新打包<span class="hljs-built_in">system</span>.img,然后重启手机吧?有没有什么简单的方法呢?<br>在编译完后,借助adb install命令直接将生成的apk文件安装到设备上即可,相比使用<span class="hljs-keyword">make</span> snod,会节省很多事件.<br></code></pre></td></tr></table></figure><h3 id="编译目录介绍"><a href="#编译目录介绍" class="headerlink" title="编译目录介绍"></a>编译目录介绍</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs out/target/product/generic/system```目录下的常用目录:"><br>- Android系统自带的apk文件都在```out/target/product/generic/system/apk```目录下<br>- 一些可执行文件(比如C编译的执行),放在```out/target/product/generic/system/bin```目录下<br>- 动态链接库放在```out/target/product/generic/system/lib```目录下<br>- 硬件抽象层文件都放在```out/targer/product/generic/system/lib/hw```目录下<br><br>### 源码目录介绍<br><br>![](https://img2020.cnblogs.com/blog/2275974/202101/2275974-20210109203736099-1901913006.png)<br><br><br>![](https://img2020.cnblogs.com/blog/2275974/202101/2275974-20210109203759902-672469351.png)<br><br><br>### lunch 后面的参数介绍<br><br></code></pre></td></tr></table></figure><p>lunch aosp_arm-eng</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。<br><br>如果您没有提供任何参数就运行命令，lunch 将提示您从菜单中选择一个目标。<br><br>所有编译目标都采用 BUILD-BUILDTYPE 形式，其中 BUILD 是表示特定功能组合的代号。<br><br>BUILDTYPE 是以下类型之一：<br><br><br>|<span class="hljs-string"> 编译类型  </span>|<span class="hljs-string"> 使用情况                                                     </span>|<br>|<span class="hljs-string"> --------- </span>|<span class="hljs-string"> ------------------------------------------------------------ </span>|<br>|<span class="hljs-string"> user      </span>|<span class="hljs-string"> 适用于生产环境                                               </span>|<br>|<span class="hljs-string"> userdebug </span>|<span class="hljs-string"> 与“user”类似，但具有 root 权限和可调试性；是进行调试时的首选编译类型 </span>|<br>|<span class="hljs-string"> eng       </span>|<span class="hljs-string"> eng具有额外调试工具的开发配置                            </span>|<br><br>![](https://img2020.cnblogs.com/blog/2275974/202101/2275974-20210109203911293-1939592244.png)<br><br><br>![](https://img2020.cnblogs.com/blog/2275974/202101/2275974-20210109204041185-295820055.png)<br><br><br><br> <span class="hljs-comment">### 单独刷入某个 img：</span><br><br>fastboot刷入命令格式：fastboot flash 系统分区 对应的name.img<br><br> ```shell<br>cd out/target/product/marlin<br>fastboot flash boot_a boot.img<br>fastboot flash boot_b boot.img<br>fastboot flash system system.img<br>fastboot flash system_b system_other.img<br>fastboot flash vendor vendor.img<br>fastboot flash userdata userdata.img<br>fastboot flash userdata data.img<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/wengliuhu/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">107979371</span> 源码目录介绍<br>https:<span class="hljs-regexp">//</span>developers.google.cn<span class="hljs-regexp">/android/im</span>ages<span class="hljs-comment">#marlin 官网刷机包，救砖</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/u012417380/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">73196722</span> lunch参数介绍<br>https:<span class="hljs-regexp">//</span>source.android.com<span class="hljs-regexp">/source/</span>building 官网刷机教程<br>https:<span class="hljs-regexp">//</span>www.dazhuanlan.com<span class="hljs-regexp">/2019/</span><span class="hljs-number">12</span><span class="hljs-regexp">/09/</span><span class="hljs-number">5</span>dedf04e496e7  Android8 分区表变化和相关信息<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>rom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pixel XL内核编译</title>
    <link href="/2021/08/22/pixel-XL%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    <url>/2021/08/22/pixel-XL%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>操作系统 ：虚拟机 ubuntu 16.04</li><li>内存 ：8G</li><li>硬盘 ：150G</li><li>CPU ：4核</li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>注： 编译环境见pixel XL源码编译</p><h3 id="1-源码分支获取"><a href="#1-源码分支获取" class="headerlink" title="1. 源码分支获取"></a>1. 源码分支获取</h3><p>根据手机型号选择分支名称</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>source.android.google.cn<span class="hljs-regexp">/setup/</span>build/building-kernels?hl=zh-cn<span class="hljs-comment">#customize-build</span><br></code></pre></td></tr></table></figure><p>Pixel XL的分支名称为android-msm-marlin-3.18-pie-qpr2</p> <img src="/2021/08/22/pixel-XL%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/images/%E5%88%86%E6%94%AF%E5%90%8D%E7%A7%B0.png" class=""><h3 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#共4G文件需要梯子，挂个vpn 大约2个小时下完</span><br>mkdir android-kernel &amp;&amp; cd android-kernel<br><br>repo init -u https://android.googlesource.com/kernel/manifest -b android-msm-marlin-<span class="hljs-number">3.18</span>-pie-qpr2<br>repo sync<br></code></pre></td></tr></table></figure><h3 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#构建aarch64的内核版本</span><br>./build/build.sh  BUILD_CONFIG=common/build.config.gki.aarch64<br></code></pre></td></tr></table></figure><p>注:此处可能会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">build/buildinfo/buildinfo.py <span class="hljs-keyword">not</span> found<br></code></pre></td></tr></table></figure><p>编辑build.config,将EXTRA_CMDS=’python build/buildinfo/buildinfo.py’ 删除，实测可以编译成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">KERNEL_DIR=private/msm-google<br>. $&#123;ROOT_DIR&#125;/$&#123;KERNEL_DIR&#125;/build.config.common<br>POST_DEFCONFIG_CMDS=<span class="hljs-string">&quot;check_defconfig &amp;&amp; compression_tool_and_files lz4&quot;</span><br>EXTRA_CMDS=<span class="hljs-string">&#x27;python build/buildinfo/buildinfo.py&#x27;</span>      <span class="hljs-comment"># &lt;----删除此行</span><br>STOP_SHIP_TRACEPRINTK=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>编译成功后内核二进制文件、模块和相应的映像位于 out/android-msm-marlinxxxxx/dist 目录下。</p><h3 id="4-刷机"><a href="#4-刷机" class="headerlink" title="4. 刷机"></a>4. 刷机</h3><h4 id="4-1-临时刷入"><a href="#4-1-临时刷入" class="headerlink" title="4.1 临时刷入"></a>4.1 临时刷入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#刷入out/xxx/Image.lz4-dtb </span><br><span class="hljs-comment">#临时有效，重启恢复之前内核</span><br><br>adb reboot bootloader<br>fastboot boot Image.lz4-dtb  <br></code></pre></td></tr></table></figure><h4 id="4-2-永久刷入"><a href="#4-2-永久刷入" class="headerlink" title="4.2 永久刷入"></a>4.2 永久刷入</h4><h5 id="4-2-1-拷贝内核文件到AOSP项目下"><a href="#4-2-1-拷贝内核文件到AOSP项目下" class="headerlink" title="4.2.1 拷贝内核文件到AOSP项目下"></a>4.2.1 拷贝内核文件到AOSP项目下</h5><p>将<code>out/xxx/Image.lz4-dtb</code> 拷贝到<code> device/google/marlin-kernel</code>下（以防万一拷贝之前备份<code>device/google/marlin-kernel/Image.lz4-dtb</code>）</p><h5 id="4-2-2-编译aosp"><a href="#4-2-2-编译aosp" class="headerlink" title="4.2.2  编译aosp"></a>4.2.2  编译aosp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">source build/envsetup.sh<br>lunch <span class="hljs-number">15</span>   <span class="hljs-comment">#根据机型选择不同版本</span><br>make bootimage<br></code></pre></td></tr></table></figure><h5 id="4-2-3-编译完成刷入系统"><a href="#4-2-3-编译完成刷入系统" class="headerlink" title="4.2.3 编译完成刷入系统"></a>4.2.3 编译完成刷入系统</h5><p>刷入/out/target/product/marlin/boot.img</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot flash boot boot.img<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>rom</tag>
      
      <tag>内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adb查看当前Activity</title>
    <link href="/2021/08/22/adb%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8DActivity/"/>
    <url>/2021/08/22/adb%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8DActivity/</url>
    
    <content type="html"><![CDATA[<h2 id="Android-8-1前"><a href="#Android-8-1前" class="headerlink" title="Android 8.1前"></a>Android 8.1前</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> dumpsys activity | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;mFocus&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Android-8-1-后"><a href="#Android-8-1-后" class="headerlink" title="Android 8.1 后"></a>Android 8.1 后</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> dumpsys activity | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;mResume&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adb设置代理</title>
    <link href="/2021/08/22/adb%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2021/08/22/adb%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell settings put global http_proxy 127.0.0.1:8888<br></code></pre></td></tr></table></figure><h2 id="移除代理（需要重启）："><a href="#移除代理（需要重启）：" class="headerlink" title="移除代理（需要重启）："></a>移除代理（需要重启）：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell settings delete global http_proxy<br><br>adb shell settings delete global global_http_proxy_host<br><br>adb shell settings delete global global_http_proxy_port<br><br>adb reboot<br></code></pre></td></tr></table></figure><h2 id="不重启移除代理"><a href="#不重启移除代理" class="headerlink" title="不重启移除代理:"></a>不重启移除代理:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell settings put global http_proxy :0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>am常用命令</title>
    <link href="/2021/08/21/am%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/21/am%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="拨打电话10086"><a href="#拨打电话10086" class="headerlink" title="拨打电话10086"></a>拨打电话10086</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb shell am start -<span class="hljs-selector-tag">a</span> android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.action</span><span class="hljs-selector-class">.CALL</span> -d tel:<span class="hljs-number">10086</span><br></code></pre></td></tr></table></figure><h2 id="打开网址"><a href="#打开网址" class="headerlink" title="打开网址"></a>打开网址</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb shell am start -<span class="hljs-selector-tag">a</span> android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.action</span><span class="hljs-selector-class">.VIEW</span> -d  http:<span class="hljs-comment">//gityuan.com</span><br></code></pre></td></tr></table></figure><h2 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity"></a>启动Activity</h2><p> 启动包名为<code>com.yuanhh.app</code>，主Activity为<code>.MainActivity</code>  且extra数据以”website”为key, “yuanh.com”为value</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">am</span> start -n <span class="hljs-keyword">com</span>.yuanhh.app/.MainActivity -es website gityuan.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">adb shell am broadcast -a com.android.test <span class="hljs-params">--es</span> test_string <span class="hljs-string">&quot;this is test string&quot;</span> <span class="hljs-params">--ei</span> test_int 100 <span class="hljs-params">--ez</span> test_boolean <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>命令列表：</p><table><thead><tr><th align="left">命令</th><th align="left">功能</th><th align="left">实现方法</th></tr></thead><tbody><tr><td align="left">am start [options] <INTENT></td><td align="left">启动Activity</td><td align="left">startActivityAsUser</td></tr><tr><td align="left">am startservice <INTENT></td><td align="left">启动Service</td><td align="left">startService</td></tr><tr><td align="left">am stopservice <INTENT></td><td align="left">停止Service</td><td align="left">stopService</td></tr><tr><td align="left">am broadcast <INTENT></td><td align="left">发送广播</td><td align="left">broadcastIntent</td></tr><tr><td align="left">am kill <PACKAGE></td><td align="left">杀指定后台进程</td><td align="left">killBackgroundProcesses</td></tr><tr><td align="left">am kill-all</td><td align="left">杀所有后台进程</td><td align="left">killAllBackgroundProcesses</td></tr><tr><td align="left">am force-stop <PACKAGE></td><td align="left">强杀进程</td><td align="left">forceStopPackage</td></tr><tr><td align="left">am hang</td><td align="left">系统卡住</td><td align="left">hang</td></tr><tr><td align="left">am restart</td><td align="left">重启</td><td align="left">restart</td></tr><tr><td align="left">am bug-report</td><td align="left">创建bugreport</td><td align="left">requestBugReport</td></tr><tr><td align="left">am dumpheap <pid> <file></td><td align="left">进程pid的堆信息输出到file</td><td align="left">dumpheap</td></tr><tr><td align="left">am send-trim-memory <pid> <level></td><td align="left">收紧进程的内存</td><td align="left">setProcessMemoryTrimLevel</td></tr><tr><td align="left">am monitor</td><td align="left">监控</td><td align="left">MyActivityController.run</td></tr></tbody></table><p>am命令实的实现方式在Am.java，最终几乎都是调用<code>ActivityManagerService</code>相应的方法来完成的，<code>am monitor</code>除外。比如前面概述中介绍的命令<code>am start -a android.intent.action.VIEW -d http://gityuan.com</code>， 启动Acitivty最终调用的是ActivityManagerService类的startActivityAsUser()方法来完成的。再比如<code>am kill-all</code>命令，最终的实现工作是由ActivityManagerService的killBackgroundProcesses()方法完成的</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>主要是启动Activity命令<code>am start [options] </code>使用options参数，接下来列举Activity命令的[options]参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">-D: 允许调试功能<br>-W: 等待app启动完成<br>-R &lt;COUNT&gt;: 重复启动Activity COUNT次<br>-S: 启动activity之前，先调用forceStopPackage()方法强制停止app.<br>–opengl-trace: 运行获取OpenGL函数的trace<br>–user &lt;USER_ID&gt; | current: 指定用户来运行App,默认为当前用户。<br>–start-profiler &lt;FILE&gt;: 启动profiler，并将结果发送到 &lt;FILE&gt;;<br>-P &lt;FILE&gt;: 类似 –start-profiler，不同的是当app进入idle状态，则停止profiling<br>–sampling INTERVAL: 设置profiler 取样时间间隔，单位ms;<br></code></pre></td></tr></table></figure><p>启动Activity的实现原理： 存在-W参数则调用startActivityAndWait()方法来运行，否则startActivityAsUser()。</p><h2 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">am</span> send-trim-memory  <span class="hljs-symbol">&lt;pid&gt;</span> <span class="hljs-symbol">&lt;level&gt;</span><br></code></pre></td></tr></table></figure><p>例如： 向pid=12345的进程，发出level=RUNNING_LOW的收紧内存命令</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">am send-<span class="hljs-keyword">trim</span>-<span class="hljs-keyword">memory</span> <span class="hljs-number">12345</span> RUNNING_LOW。<br></code></pre></td></tr></table></figure><p>那么level取值范围为： HIDDEN、RUNNING_MODERATE、BACKGROUND、RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对于am的子命令，startservice, stopservice, broadcast, kill, profile start, profile stop, dumpheap的可选参数都允许设置<code>--user </code>。目前市面上的绝大多数手机还是单用户模式，故可以忽略该参数，默认为当前用户。</p><p>例如：启动id=10010的用户的指定service。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">am startservice --<span class="hljs-keyword">user</span> <span class="hljs-title">10010</span><br></code></pre></td></tr></table></figure><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent的参数和flags较多，分为3种类型参数，常用参数，Extra参数，Flags参数</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul><li><code>-a </code>: 指定Intent action， 实现原理Intent.setAction()；</li><li><code>-n </code>: 指定组件名，格式为{包名}/.{主Activity名}，实现原理Intent.setComponent(）；</li><li><code>-d </code>: 指定Intent data URI</li><li><code>-t </code>: 指定Intent MIME Type</li><li> <code>-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]:</code>:指定Intent category，实现原理Intent.addCategory()</li><li><code>-p </code>: 指定包名，实现原理Intent.setPackage();</li><li><code>-f </code>: 添加flags，实现原理Intent.setFlags(int )，紧接着的参数必须是int型；</li></ul><p>实例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">am start -<span class="hljs-selector-tag">a</span> android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.action</span><span class="hljs-selector-class">.VIEW</span><br>am start -n com<span class="hljs-selector-class">.yuanhh</span>.app/<span class="hljs-selector-class">.MainActivity</span><br>am start -d <span class="hljs-attribute">content</span>://contacts/people/<span class="hljs-number">1</span><br>am start -t image/png<br>am start -c android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.category</span>.APP_CONTACTS<br></code></pre></td></tr></table></figure><h3 id="Extra参数"><a href="#Extra参数" class="headerlink" title="Extra参数"></a>Extra参数</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><table><thead><tr><th>参数</th><th>-e/-es</th><th>-esn</th><th>-ez</th><th>-ei</th><th>-el</th><th>-ef</th><th>-eu</th><th>-ecn</th></tr></thead><tbody><tr><td>类型</td><td>String</td><td>(String)null</td><td>boolean</td><td>int</td><td>long</td><td>float</td><td>uri</td><td>component</td></tr></tbody></table><p>比如参数es是Extra String首字母简称，实例：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">am</span> start -n <span class="hljs-keyword">com</span>.yuanhh.app/.MainActivity -es website gityuan.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>此处<code>-es website gityuan.com</code>，等价于Intent.putExtra(“website”, “gityuan.com”);</p><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><table><thead><tr><th>参数</th><th>-esa</th><th>-eia</th><th>-ela</th><th>-efa</th></tr></thead><tbody><tr><td>数组类型</td><td>String[]</td><td>int[]</td><td>long[]</td><td>float[]</td></tr></tbody></table><p>比如参数eia，是Extra int array首字母简称，多个value值之间以逗号隔开.。</p><p>实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">am</span> start -n com.yuanhh.app/.MainActivity -ela weekday <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>此处<code>-ela weekday 1,2,3,4,5</code>，等价于Intent.putExtra(“weekday”, new int[]{1,2,3,4,5});</p><h4 id="ArrayList类型"><a href="#ArrayList类型" class="headerlink" title="ArrayList类型"></a>ArrayList类型</h4><table><thead><tr><th>参数</th><th>-esal</th><th>-eial</th><th>-elal</th><th>-efal</th></tr></thead><tbody><tr><td>List类型</td><td>String</td><td>int</td><td>long</td><td>float</td></tr></tbody></table><p>比如参数efal，是Extra float Array List首字母简称，多个value值之间以逗号隔开。</p><p>实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">am</span> start -n com.yuanhh.app/.MainActivity -efal nums <span class="hljs-number">1</span>.<span class="hljs-number">2</span>,<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>此处<code>-efal nums 1.2,2.2</code>，等价于先构造ArrayList变量，再通过putExtra放入第二个参数。</p><h3 id="Flags参数"><a href="#Flags参数" class="headerlink" title="Flags参数"></a>Flags参数</h3><p>在参数类型1中，提到有<code>-f </code>，是通过<code>Intent.setFlags(int )</code>方法，来设置Intent的flags.本小节也是关于flags，是通过<code>Intent.addFlags(int )</code>方法。如下所示，所有的flags参数。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">[--grant-read-uri-permission] [--grant-write-uri-permission]<br>[--grant-persistable-uri-permission] [--grant-prefix-uri-permission]<br>[--debug-log-resolution]<br>[--exclude-stopped-packages] [--include-stopped-packages]<br>[--activity-brought-to-front] [--activity-clear-top]<br>[--activity-clear-when-task-reset] [--activity-exclude-from-recents]<br>[--activity-launched-from-history] [--activity-multiple-task]<br>[--activity-no-animation] [--activity-no-history]<br>[--activity-no-user-action] [--activity-previous-is-top]<br>[--activity-reorder-to-front] [--activity-reset-task-if-needed]<br>[--activity-single-top] [--activity-clear-task]<br>[--activity-task-on-home]<br>[--receiver-registered-only] [--receiver-replace-pending]<br></code></pre></td></tr></table></figure><p>例如，发送action=”broadcast.demo”的广播，并且对于forceStopPackage()的应用不允许接收该广播，命令如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">am broadcast -<span class="hljs-keyword">a</span> broadcast.demo <span class="hljs-comment">--exclude-stopped-packages</span><br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>ea84febaa7bd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>adb</tag>
      
      <tag>am</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOS13.3.1 越狱后设置中未显示越狱插件</title>
    <link href="/2021/08/21/IOS13-3-1-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%9C%AA%E6%98%BE%E7%A4%BA%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/08/21/IOS13-3-1-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%9C%AA%E6%98%BE%E7%A4%BA%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ol><li>进入 cydia 重新安装 <code>cydia substrate</code>如果还未显示，重新安装 <code>Preference Loader</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越狱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot+JWT Token验证</title>
    <link href="/2021/08/21/SpringBoot-JWT-Token%E9%AA%8C%E8%AF%81/"/>
    <url>/2021/08/21/SpringBoot-JWT-Token%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-pom-xml-添加依赖"><a href="#1-pom-xml-添加依赖" class="headerlink" title="1. pom.xml 添加依赖"></a>1. pom.xml 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jwt:</span><br>  <span class="hljs-attr">expire:</span> <span class="hljs-number">86400000</span>      <span class="hljs-comment">#jwt有效时间(24小时)</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">secret</span>        <span class="hljs-comment"># 签名密钥</span><br></code></pre></td></tr></table></figure><h2 id="3-工具类生成、验证token、根据token提取用户ID"><a href="#3-工具类生成、验证token、根据token提取用户ID" class="headerlink" title="3. 工具类生成、验证token、根据token提取用户ID"></a>3. 工具类生成、验证token、根据token提取用户ID</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//token有效时长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">long</span> EXPIRE_TIME;<br>    <span class="hljs-comment">//密钥</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String SECRET;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSecret</span><span class="hljs-params">(String secret)</span> </span>&#123;<br>        JwtUtil.SECRET= secret;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.expire&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExpireTime</span><span class="hljs-params">(<span class="hljs-keyword">long</span> date)</span> </span>&#123;<br>        JwtUtil.EXPIRE_TIME= date;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成签名，24小时后过期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getToken</span><span class="hljs-params">(String userId)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Date date = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + EXPIRE_TIME);<br>            Algorithm algorithm = Algorithm.HMAC256(SECRET);<br>            <span class="hljs-keyword">return</span> JWT.create()<br>                    <span class="hljs-comment">// 将 user id 保存到 token 里面</span><br>                    .withAudience(userId)<br>                    .withExpiresAt(date)<br>                    <span class="hljs-comment">// token 的密钥</span><br>                    .sign(algorithm);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据token获取userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getUserName</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String userId = JWT.decode(token).getAudience().get(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> userId;<br>        &#125; <span class="hljs-keyword">catch</span> (JWTDecodeException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DecodedJWT <span class="hljs-title">verify</span><span class="hljs-params">(String token)</span></span>&#123;<br>        JWTVerifier build = JWT.require(Algorithm.HMAC256(SECRET)).build();<br>        <span class="hljs-keyword">return</span> build.verify(token);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-添加拦截器"><a href="#4-添加拦截器" class="headerlink" title="4. 添加拦截器"></a>4. 添加拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object)</span> </span>&#123;<br>        <span class="hljs-comment">//OPTIONS请求默认通过</span><br>        <span class="hljs-keyword">if</span> (httpServletRequest.getMethod().equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取请求头X-Token字段</span><br>        String token = httpServletRequest.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtil.verify(token);<br>        &#125;<span class="hljs-keyword">catch</span> (SignatureVerificationException e)&#123;<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            System.out.println(<span class="hljs-string">&quot;无效签名&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (TokenExpiredException e)&#123;<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            System.out.println(<span class="hljs-string">&quot;token过期&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (AlgorithmMismatchException e)&#123;<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            System.out.println(<span class="hljs-string">&quot;token算法不一致&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            System.out.println(<span class="hljs-string">&quot;token无效&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-配置拦截器"><a href="#5-配置拦截器" class="headerlink" title="5. 配置拦截器"></a>5. 配置拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> JwtInterceptor())<br>                <span class="hljs-comment">//拦截的路径</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//排除登录接口</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/prod-api/user/login&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/prod-api/user/logout&quot;</span>);<br>        WebMvcConfigurer.<span class="hljs-keyword">super</span>.addInterceptors(registry);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-controller层实现登录方法和获取用户信息"><a href="#6-controller层实现登录方法和获取用户信息" class="headerlink" title="6. controller层实现登录方法和获取用户信息"></a>6. controller层实现登录方法和获取用户信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login&quot;,method = RequestMethod.POST)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;JSONObject&gt; <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String userInfo)</span></span>&#123;<br>    JSONObject jsonObject = JSON.parseObject(userInfo);<br>    String username = (String) jsonObject.get(<span class="hljs-string">&quot;username&quot;</span>);  <span class="hljs-comment">//获取登录账号</span><br>    String password = (String) jsonObject.get(<span class="hljs-string">&quot;password&quot;</span>);  <span class="hljs-comment">//登录密码</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 验证用户密码是否正确（此处省略）</span><br><span class="hljs-comment">     */</span>        <br><br>    JSONObject dataJson = <span class="hljs-keyword">new</span> JSONObject();<br>    dataJson.put(<span class="hljs-string">&quot;token&quot;</span>,JwtUtil.getToken(username));  <span class="hljs-comment">//将生成token发送至用户</span><br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;登录成功&quot;</span>, dataJson);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>登录成功返回token</p> <img src="/2021/08/21/SpringBoot-JWT-Token%E9%AA%8C%E8%AF%81/images/login.png" class=""><p>更改请求x-token，被拦截器拦截返回错误信息</p> <img src="/2021/08/21/SpringBoot-JWT-Token%E9%AA%8C%E8%AF%81/images/token.png" class=""><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/lingade/springboot-jwt">SpringBoot+JWT Token验证</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JWT</tag>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida加载APK/DEX文件并调用方法</title>
    <link href="/2021/08/21/Frida%E5%8A%A0%E8%BD%BDAPK-DEX%E6%96%87%E4%BB%B6%E5%B9%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/08/21/Frida%E5%8A%A0%E8%BD%BDAPK-DEX%E6%96%87%E4%BB%B6%E5%B9%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-AndroidStudio创建项目"><a href="#1-AndroidStudio创建项目" class="headerlink" title="1. AndroidStudio创建项目"></a>1. AndroidStudio创建项目</h2><p>创建returnNum方法</p> <img src="/2021/08/21/Frida%E5%8A%A0%E8%BD%BDAPK-DEX%E6%96%87%E4%BB%B6%E5%B9%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/images/as.png" class=""><h2 id="2-build项目，将apk-push手机中"><a href="#2-build项目，将apk-push手机中" class="headerlink" title="2. build项目，将apk push手机中"></a>2. build项目，将apk push手机中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb push 1.apk /data/local/tmp<br></code></pre></td></tr></table></figure><h2 id="3-Frida加载APK调用方法"><a href="#3-Frida加载APK调用方法" class="headerlink" title="3. Frida加载APK调用方法"></a>3. Frida加载APK调用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> DEXFactory = <span class="hljs-literal">null</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadAPK</span>(<span class="hljs-params">path</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> ActivityThread = Java.use(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>    <span class="hljs-keyword">var</span> app = ActivityThread.currentApplication();<br>    Java.classFactory.cacheDir = <span class="hljs-string">&quot;/data/data/&quot;</span> + app.getPackageName() + <span class="hljs-string">&quot;/cache&quot;</span>;<br>    Java.classFactory.codeCacheDir = <span class="hljs-string">&quot;/data/data/&quot;</span> + app.getPackageName() + <span class="hljs-string">&quot;/code_cache&quot;</span>;<br>    <span class="hljs-keyword">var</span> DexClassLoader = Java.use(<span class="hljs-string">&quot;dalvik.system.DexClassLoader&quot;</span>);<br>    <span class="hljs-keyword">var</span> DEXCL = DexClassLoader.$new(path, Java.classFactory.codeCacheDir, <span class="hljs-literal">null</span>, DexClassLoader.getSystemClassLoader());<br>    DEXFactory = Java.ClassFactory.get(DEXCL);<br>    DEXFactory.cacheDir = <span class="hljs-string">&quot;/data/data/&quot;</span> + app.getPackageName() + <span class="hljs-string">&quot;/cache&quot;</span>;<br>    DEXFactory.codeCacheDir = <span class="hljs-string">&quot;/data/data/&quot;</span> + app.getPackageName() + <span class="hljs-string">&quot;/code_cache&quot;</span>;<br>&#125;<br><br><br>Java.performNow(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    loadAPK(<span class="hljs-string">&quot;/data/local/tmp/1.apk&quot;</span>);<br>    <span class="hljs-keyword">var</span> utils = DEXFactory.use(<span class="hljs-string">&quot;custom.dex.utils&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(utils.returnNum());<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>加载APK并调用方法,此处方法只是简单的return 数字，也可以将一些复杂的逻辑放在APK中用于调用</p> <img src="/2021/08/21/Frida%E5%8A%A0%E8%BD%BDAPK-DEX%E6%96%87%E4%BB%B6%E5%B9%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/images/frida.png" class=""><h2 id="4-Frida加载DEX调用方法"><a href="#4-Frida加载DEX调用方法" class="headerlink" title="4.Frida加载DEX调用方法"></a>4.Frida加载DEX调用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">Java.openClassFile(<span class="hljs-string">&quot;/data/local/tmp/xxx.dex&quot;</span>).load();<br><span class="hljs-keyword">var</span>  utils = Java.use(<span class="hljs-string">&quot;custom.dex.utils&quot;</span>);<br><span class="hljs-built_in">console</span>.log(utils.returnNum());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>frida</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>frida</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
